[Day-01] : Create directory structure (World Pi Estate).
          Create a NPM Project (Frontend).
          -- npm create vite@latest frontend
          -- cd frontend/
          Install All Dependancies.
          -- npm install
          Run the Project (Frontend).
          -- npm run dev / yarn run dev

[Day-02] : Create and Commit the Code into Github.
          -- cd ..
          -- git init
          -- git add .
          -- git commit -m "Very First Commit"
          Create a New Repository on Github.
          -- git remote add origin git@github.com:devSAK/World-Pi-Estate.git
          -- git branch -M main
          -- git push -u origin main

[Day-03] : Add Tailwind CSS Dependancies.
          -- cd frontend/
          -- npm install -D tailwindcss postcss autoprefixer
          -- npx tailwindcss init -p

[Day-04] : Create Pages and Routes.
          Add Pages.
          Install React Router Dependancies.
          -- npm install react-router-dom

[Day-05] : Create Header Component.
          Add Components.
          Install React Icons Dependancies.
          -- npm install react-icons

--------------------------------------------------
[Day-06] : Create and Run the Server (Backend).
          -- cd ..
          Add Backend Folder.
          -- npm init -y
          Install Express Dependencies.
          -- npm install express
          Run the Project (Backend).
          -- cd backend/
          -- node index.js
          Install Nodemon Dependancies.
          -- cd ..
          -- npm install nodemon
          -- npm run dev / yarn run dev
          Add gitignore File to the Project Root.

[Day-07] : Connect to Database.
          Install Mongoose Dependencies.
          -- npm install mongoose
          Create a new Project and 
          Connection String on MongoDB.
          Add Env.
          Install Dotenv Dependancies.
          -- npm install dotenv

[Day-08] : Create User Model.
          Add Models.

[Dat-09] : Create a Test API Route.
          Add Routes.
          Add Controllers.
          
[Day-10] : Create SignUp API Route.
          Install Punycode Dependencies (Terminal Error)
          -- npm install punycode --save
          SignUp User Created, Check in MongoDB.
          Need to Hide User Password.
          -- npm install bcryptjs
          Add Error Handling for Unique User Email Id.

[Day-11] : Create a Middleware and a Function to Handle 
          Possible Errors.

[Day-12] : Complete SignUp Page UI.

[Day-13] : Complete SignUp Page Functionality.
          Add Proxy.

[Day-14] : Create SignIn API Route.
          Create Hash Token including the Email of the 
          User.
          -- npm install jsonwebtoken
          